// Code generated by MockGen. DO NOT EDIT.
// Source: ./index.go

// Package fvm is a generated GoMock package.
package fvm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/ipfs-force-community/go-fvm-sdk/sdk/types"
	cid "github.com/ipfs/go-cid"
)

// MockFvm is a mock of Fvm interface.
type MockFvm struct {
	ctrl     *gomock.Controller
	recorder *MockFvmMockRecorder
}

// MockFvmMockRecorder is the mock recorder for MockFvm.
type MockFvmMockRecorder struct {
	mock *MockFvm
}

// NewMockFvm creates a new mock instance.
func NewMockFvm(ctrl *gomock.Controller) *MockFvm {
	mock := &MockFvm{ctrl: ctrl}
	mock.recorder = &MockFvmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFvm) EXPECT() *MockFvmMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockFvm) Open(id cid.Cid) (*types.IpldOpen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", id)
	ret0, _ := ret[0].(*types.IpldOpen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFvmMockRecorder) Open(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFvm)(nil).Open), id)
}
